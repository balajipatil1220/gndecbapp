// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  phonenumber   String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  gender        Gender?
  address       String?

  role         Role
  Account      Account[]
  Session      Session[]
  TaskReminder TaskReminder[]
  Maintenance  Maintenance[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

enum Role {
  ADMIN
  SUPERADMIN
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

model TaskReminder {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  renewalDate DateTime
  status      TaskStatus
  userId      String     @db.ObjectId
  imageURL    String?

  createdBy User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  COMPLETED
  INPROGRESS
}

model Maintenance {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  categoryID        String            @db.ObjectId
  MaintenanceType   MaintenanceType
  requestedByuserId String            @db.ObjectId
  status            MaintenanceStatus
  imageURL          String?

  MaintenanceRemarks MaintenanceRemarks?

  requestedBy         User                @relation(fields: [requestedByuserId], references: [id], onDelete: Cascade)
  maintenanceCategory MaintenanceCategory @relation(fields: [categoryID], references: [id], onDelete: Cascade)
}

model MaintenanceCategory {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  Maintenance Maintenance[]
}

enum MaintenanceType {
  NEW
  RENOVATION
  DELETION
}

enum MaintenanceStatus {
  PENDING
  COMPLETED
  REJECTED
}

model MaintenanceRemarks {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceId String      @unique @db.ObjectId
  text          String
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
}
